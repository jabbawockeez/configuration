# Some useful commands to use docker.
# Author: yeasy@github
# Created:2014-09-25

alias dkrpid="sudo docker inspect --format '{{.State.Pid}}'"
alias dkrip="sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
alias dkrexpose="sudo docker-expose"

#the implementation refs from https://github.com/jpetazzo/nsenter/blob/master/docker-enter
function dkren() {
	#if [ -e $(dirname "$0")/nsenter ]; then
	#Change for centos bash running
	if [ -e $(dirname '$0')/nsenter ]; then
		# with boot2docker, nsenter is not in the PATH but it is in the same folder
		NSENTER=$(dirname "$0")/nsenter
	else
		# if nsenter has already been installed with path notified, here will be clarified
		NSENTER=$(which nsenter)
		#NSENTER=nsenter
	fi
	[ -z "$NSENTER" ] && echo "WARN Cannot find nsenter" && return

	if [ -z "$1" ]; then
		echo "Usage: `basename "$0"` CONTAINER [COMMAND [ARG]...]"
		echo ""
		echo "Enters the Docker CONTAINER and executes the specified COMMAND."
		echo "If COMMAND is not specified, runs an interactive shell in CONTAINER."
	else
		PID=$(sudo docker inspect --format "{{.State.Pid}}" "$1")
		if [ -z "$PID" ]; then
			echo "WARN Cannot find the given container"
			return
		fi
		shift

		OPTS="--target $PID --mount --uts --ipc --net --pid"

		if [ -z "$1" ]; then
			# No command given.
			# Use su to clear all host environment variables except for TERM,
			# initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,
			# and start a login shell.
			#sudo $NSENTER "$OPTS" su - root
			sudo $NSENTER --target $PID --mount --uts --ipc --net --pid su - root
		else
			# Use env to clear all host environment variables.
			sudo $NSENTER --target $PID --mount --uts --ipc --net --pid env -i $@
		fi
	fi
}




# from https://github.com/tcnksm/docker-alias
# ------------------------------------
# Docker alias and function
# ------------------------------------

# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
# alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
# alias dki="docker run -i -t -P"

# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"

# Stop one container
alias dst="docker stop"

# Stop all containers
dsta() { docker stop $(docker ps -a -q); }

# Remove all containers
drma() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
# alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Stop and Remove one container
alias drmf="docker rm -f"

# Remove all images
# dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test 
dbu() { docker build -t=$1 .; }

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

# Bash into running container
# dbash() { docker exec -it $(docker ps -aqf "name=$1") bash; }
den() { docker exec -it $(docker ps -aqf "name=$1") sh; }

# Run deamonized container
alias drun="docker run -dit"

# docker-compose
alias c='docker-compose'
alias cb='docker-compose build'
alias cup='docker-compose up'
#alias cr='docker-compose run --service-ports --rm'
#alias crl='docker-compose run --service-ports --rm local'
#alias crd='docker-compose run --service-ports --rm develop'
#alias crt='docker-compose run --rm test'
#alias crp='docker-compose run --rm provision'
#alias crci='docker-compose run --rm ci'
#alias crwt='docker-compose run --rm watchtest'
alias cps='docker-compose ps'
alias clogs='docker-compose logs'

crm(){
    docker-compose stop $1
    docker-compose rm --force $1
}


alias dm=docker-machine
